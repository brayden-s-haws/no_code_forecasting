{"cells":[{"cell_type":"code","source":"import pandas as _hex_pandas\nimport datetime as _hex_datetime\nimport json as _hex_json","execution_count":null,"metadata":{},"outputs":[]},{"cell_type":"code","source":"hex_scheduled = _hex_json.loads(\"false\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_user_email = _hex_json.loads(\"\\\"example-user@example.com\\\"\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_run_context = _hex_json.loads(\"\\\"logic\\\"\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_timezone = _hex_json.loads(\"\\\"UTC\\\"\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_project_id = _hex_json.loads(\"\\\"6356acb1-2d8d-4f12-96a9-376dac1bb85e\\\"\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_project_name = _hex_json.loads(\"\\\"No-Code Time Series Forecasting\\\"\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_status = _hex_json.loads(\"\\\"Production\\\"\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_categories = _hex_json.loads(\"[\\\"External\\\"]\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"hex_color_palette = _hex_json.loads(\"[\\\"#4C78A8\\\",\\\"#F58518\\\",\\\"#E45756\\\",\\\"#72B7B2\\\",\\\"#54A24B\\\",\\\"#EECA3B\\\",\\\"#B279A2\\\",\\\"#FF9DA6\\\",\\\"#9D755D\\\",\\\"#BAB0AC\\\"]\")","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"code","source":"import time\nfrom datetime import datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom prophet import Prophet\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sales_data = 'sales_data_2018_2022.csv'\nshipping_data = 'shipping_data_2018_2023.csv'\nsearch_data = 'grow_google_trends.csv'\nchurn_data = 'customer_churn_data_2014_2021.csv'\n\navailable_datasets = [' ', sales_data, shipping_data, search_data, churn_data]","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import json as _hex_json\nselect_dataset = _hex_pks.kernel_execution.input_cell.run_dropdown_dynamic(args=_hex_types.DropdownDynamicArgs.from_dict({**_hex_json.loads(\"{\\\"dataframe_column\\\":null,\\\"ui_selected_value\\\":\\\"grow_google_trends.csv\\\"}\"), **{_hex_json.loads(\"\\\"options_variable\\\"\"):_hex_kernel.variable_or_none(\"available_datasets\", scope_getter=lambda: globals())}}), app_session_token=_hex_APP_SESSION_TOKEN, python_kernel_init_status=_hex_python_kernel_init_status, hex_timezone=_hex_kernel.variable_or_none(\"hex_timezone\", scope_getter=lambda: globals()), interrupt_event=locals().get(\"_hex_interrupt_event\"))\n\nimport json as _hex_json\n_hex_pks.kernel_execution.input_cell.filled_dynamic_value(args=_hex_types.FilledDynamicValueArgs.from_dict({**_hex_json.loads(\"{\\\"variable_name\\\":\\\"available_datasets\\\",\\\"dataframe_column\\\":null,\\\"max_size\\\":10000,\\\"max_size_in_bytes\\\":5242880}\"), **{_hex_json.loads(\"\\\"variable\\\"\"):_hex_kernel.variable_or_none(\"available_datasets\", scope_getter=lambda: globals())}}), app_session_token=_hex_APP_SESSION_TOKEN, python_kernel_init_status=_hex_python_kernel_init_status, hex_timezone=_hex_kernel.variable_or_none(\"hex_timezone\", scope_getter=lambda: globals()), interrupt_event=locals().get(\"_hex_interrupt_event\"))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dataset = pd.read_csv(select_dataset)\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"time.sleep(.5)\ndataset.head(5)","metadata":{},"execution_count":null,"outputs":[{"data":{"application/vnd.hex.export+parquet":{"success":true,"exportKey":"455658aa-ee04-480f-945a-3fd455933fa2/6356acb1-2d8d-4f12-96a9-376dac1bb85e/exports/660541fa-cf64-4b05-8ea5-e85cabcf3aa3"},"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>week</th>\n      <th>Grow.com_search_google_trend</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2018-11-25</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2018-12-02</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2018-12-09</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2018-12-16</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2018-12-23</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"execution_count":null,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","source":"columns = dataset.columns.tolist()","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import json as _hex_json\nforecast_values = _hex_pks.kernel_execution.input_cell.run_dropdown_dynamic(args=_hex_types.DropdownDynamicArgs.from_dict({**_hex_json.loads(\"{\\\"dataframe_column\\\":null,\\\"ui_selected_value\\\":\\\"Grow.com_search_google_trend\\\"}\"), **{_hex_json.loads(\"\\\"options_variable\\\"\"):_hex_kernel.variable_or_none(\"columns\", scope_getter=lambda: globals())}}), app_session_token=_hex_APP_SESSION_TOKEN, python_kernel_init_status=_hex_python_kernel_init_status, hex_timezone=_hex_kernel.variable_or_none(\"hex_timezone\", scope_getter=lambda: globals()), interrupt_event=locals().get(\"_hex_interrupt_event\"))\n\nimport json as _hex_json\n_hex_pks.kernel_execution.input_cell.filled_dynamic_value(args=_hex_types.FilledDynamicValueArgs.from_dict({**_hex_json.loads(\"{\\\"variable_name\\\":\\\"columns\\\",\\\"dataframe_column\\\":null,\\\"max_size\\\":10000,\\\"max_size_in_bytes\\\":5242880}\"), **{_hex_json.loads(\"\\\"variable\\\"\"):_hex_kernel.variable_or_none(\"columns\", scope_getter=lambda: globals())}}), app_session_token=_hex_APP_SESSION_TOKEN, python_kernel_init_status=_hex_python_kernel_init_status, hex_timezone=_hex_kernel.variable_or_none(\"hex_timezone\", scope_getter=lambda: globals()), interrupt_event=locals().get(\"_hex_interrupt_event\"))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import json as _hex_json\nforecast_dates = _hex_pks.kernel_execution.input_cell.run_dropdown_dynamic(args=_hex_types.DropdownDynamicArgs.from_dict({**_hex_json.loads(\"{\\\"dataframe_column\\\":null,\\\"ui_selected_value\\\":\\\"sale_date\\\"}\"), **{_hex_json.loads(\"\\\"options_variable\\\"\"):_hex_kernel.variable_or_none(\"columns\", scope_getter=lambda: globals())}}), app_session_token=_hex_APP_SESSION_TOKEN, python_kernel_init_status=_hex_python_kernel_init_status, hex_timezone=_hex_kernel.variable_or_none(\"hex_timezone\", scope_getter=lambda: globals()), interrupt_event=locals().get(\"_hex_interrupt_event\"))\n\nimport json as _hex_json\n_hex_pks.kernel_execution.input_cell.filled_dynamic_value(args=_hex_types.FilledDynamicValueArgs.from_dict({**_hex_json.loads(\"{\\\"variable_name\\\":\\\"columns\\\",\\\"dataframe_column\\\":null,\\\"max_size\\\":10000,\\\"max_size_in_bytes\\\":5242880}\"), **{_hex_json.loads(\"\\\"variable\\\"\"):_hex_kernel.variable_or_none(\"columns\", scope_getter=lambda: globals())}}), app_session_token=_hex_APP_SESSION_TOKEN, python_kernel_init_status=_hex_python_kernel_init_status, hex_timezone=_hex_kernel.variable_or_none(\"hex_timezone\", scope_getter=lambda: globals()), interrupt_event=locals().get(\"_hex_interrupt_event\"))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"forecast_df = dataset[[forecast_dates, forecast_values]].rename(columns={forecast_dates : 'ds', forecast_values: 'y'})\n\nforecast_df['ds'] = pd.to_datetime(forecast_df['ds'])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"forecast_periods = _hex_json.loads(\"0\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"forecasts_to_run = _hex_json.loads(\"[]\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if len(forecast_df) >= 2:\n    # Calculate the number of days between the first two dates\n    date_diff = (forecast_df['ds'].iloc[1] - forecast_df['ds'].iloc[0]).days\n\n    # Determine the appropriate value for 's' based on date_diff\n    if date_diff <= 3:\n        #Daily data\n        set_seasonality = 7\n        set_freq = 'D'\n    elif date_diff <= 7:\n    # Weekly data\n        set_seasonality = 7\n        set_freq = 'W-SUN'\n    elif date_diff <= 31:\n    # Monthly data\n        set_seasonality = 12\n        set_freq = 'MS'\n    elif date_diff <= 93:\n    # Quarterly data\n        set_seasonality = 4\n        set_freq = 'QS'\n    elif date_diff <= 365:\n    # Yearly data\n        set_seasonality = 12\n        set_freq = 'AS'\n    else:\n    # For any other frequency, set a default or handle it as needed\n        set_seasonality = 0\n        set_freq = 0\n\nelse:\n    date_diff = 0\n    set_seasonality = 0\n    set_freq = 0","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if len(forecast_df) >= 2:\n    prophet_date_diff = (forecast_df['ds'].iloc[1] - forecast_df['ds'].iloc[0]).days\nelse:\n    prophet_date_diff = 0\n\nprophet_forecast_days = prophet_date_diff * forecast_periods","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if 'linear' in forecasts_to_run:\n    lin_model = sm.tsa.ARIMA(forecast_df['y'], order=(1, 0, 1))\n    lin_results = lin_model.fit()\n    lin_forecast = lin_results.forecast(steps=forecast_periods)\n\n\n\n    df_lin_historical = forecast_df\n    lin_forecast_dates = pd.date_range(start=df_lin_historical['ds'].iloc[-1] + pd.DateOffset(days=7), periods=forecast_periods, freq=set_freq)\n    lin_forecast_data = pd.DataFrame({'ds': lin_forecast_dates,'y': lin_forecast.values,'Forecast': 'Forecast'})\n    df_lin_historical['Forecast'] = 'Actual'\n    lin_combined_df = pd.concat([df_lin_historical, lin_forecast_data])\nelse:\n    lin_combined_df = pd.DataFrame(columns=['ds', 'y', 'Forecast'])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import altair\nchart_lin_combined_df = altair.Chart.from_json(\"\"\"\n{\n    \"width\": \"container\",\n    \"height\": \"container\",\n    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n    \"layer\": [\n        {\n            \"resolve\": {\n                \"scale\": {\n                    \"color\": \"independent\",\n                    \"y\": \"shared\"\n                }\n            },\n            \"layer\": [\n                {\n                    \"transform\": [\n                        {\n                            \"calculate\": \"toDate(datum[\\\"ds\\\"])\",\n                            \"as\": \"ds\"\n                        },\n                        {\n                            \"filter\": \"isValid(datum[\\\"ds\\\"])\"\n                        }\n                    ],\n                    \"layer\": [\n                        {\n                            \"mark\": {\n                                \"type\": \"line\",\n                                \"point\": false,\n                                \"clip\": true,\n                                \"cursor\": \"crosshair\"\n                            },\n                            \"encoding\": {\n                                \"opacity\": {\n                                    \"value\": 1\n                                }\n                            }\n                        },\n                        {\n                            \"mark\": {\n                                \"type\": \"point\",\n                                \"tooltip\": true,\n                                \"clip\": true\n                            },\n                            \"encoding\": {\n                                \"opacity\": {\n                                    \"value\": 0,\n                                    \"condition\": {\n                                        \"param\": \"pivot_hover_cffc8612-9eb2-4dea-bc75-db02f1c9f181\",\n                                        \"value\": 1,\n                                        \"empty\": false\n                                    }\n                                },\n                                \"size\": {\n                                    \"value\": 80\n                                }\n                            },\n                            \"params\": [\n                                {\n                                    \"name\": \"pivot_hover_cffc8612-9eb2-4dea-bc75-db02f1c9f181\",\n                                    \"select\": {\n                                        \"type\": \"point\",\n                                        \"on\": \"mouseover\",\n                                        \"nearest\": false,\n                                        \"fields\": [\n                                            \"ds\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"encoding\": {\n                        \"x\": {\n                            \"field\": \"ds\",\n                            \"type\": \"temporal\",\n                            \"title\": \"Date Range\",\n                            \"scale\": {},\n                            \"axis\": {\n                                \"grid\": true,\n                                \"ticks\": true,\n                                \"labels\": true,\n                                \"labelFlush\": false,\n                                \"format\": {\n                                    \"format\": \"DATE_ISO8601\",\n                                    \"timezone\": \"IGNORE\",\n                                    \"columnType\": \"DATETIME\"\n                                },\n                                \"formatType\": \"DATETIME_FORMATTER\"\n                            }\n                        },\n                        \"y\": {\n                            \"field\": \"y\",\n                            \"type\": \"quantitative\",\n                            \"aggregate\": \"sum\",\n                            \"title\": \"Values\",\n                            \"scale\": {\n                                \"type\": \"linear\"\n                            },\n                            \"axis\": {\n                                \"grid\": true,\n                                \"ticks\": true,\n                                \"labels\": true,\n                                \"labelFlush\": false\n                            }\n                        },\n                        \"color\": {\n                            \"field\": \"Forecast\",\n                            \"scale\": {\n                                \"range\": [\n                                    \"#4C78A8\",\n                                    \"#F58518\",\n                                    \"#E45756\",\n                                    \"#72B7B2\",\n                                    \"#54A24B\",\n                                    \"#EECA3B\",\n                                    \"#B279A2\",\n                                    \"#FF9DA6\",\n                                    \"#9D755D\",\n                                    \"#BAB0AC\"\n                                ]\n                            },\n                            \"legend\": {\n                                \"symbolOpacity\": 1,\n                                \"symbolType\": \"stroke\"\n                            },\n                            \"title\": \"Forecast\"\n                        }\n                    }\n                },\n                {\n                    \"data\": {\n                        \"name\": \"lin_combined_df\"\n                    },\n                    \"transform\": [\n                        {\n                            \"aggregate\": [],\n                            \"groupby\": [\n                                \"Forecast\"\n                            ]\n                        },\n                        {\n                            \"window\": [\n                                {\n                                    \"op\": \"rank\",\n                                    \"as\": \"rank\"\n                                }\n                            ]\n                        },\n                        {\n                            \"filter\": \"datum.rank <= 101\"\n                        }\n                    ],\n                    \"mark\": {\n                        \"type\": \"rule\",\n                        \"clip\": true\n                    },\n                    \"name\": \"aggregate_color_spec_cffc8612_9eb2_4dea_bc75_db02f1c9f181\",\n                    \"encoding\": {\n                        \"opacity\": {\n                            \"value\": 0\n                        }\n                    }\n                }\n            ]\n        }\n    ],\n    \"config\": {\n        \"legend\": {\n            \"orient\": \"right\"\n        },\n        \"font\": \"\\\"IBM Plex Sans\\\", system-ui, -apple-system, BlinkMacSystemFont, sans-serif\",\n        \"view\": {}\n    },\n    \"datasets\": {\n        \"layer00\": [\n            {\n                \"name\": \"dummy\",\n                \"value\": 0\n            }\n        ]\n    },\n    \"usermeta\": {\n        \"selectionConfigs\": {}\n    }\n}\n\"\"\")\nchart_lin_combined_df.datasets.layer00 = lin_combined_df.to_json(orient='records')\nchart_lin_combined_df.display(actions=False)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if 'simple_sea' in forecasts_to_run:\n    season_model = sm.tsa.statespace.SARIMAX(forecast_df['y'], order=(1,0,1), seasonal_order=(1,0,1,set_seasonality))\n    season_results = season_model.fit()\n    season_forecast = season_results.forecast(steps=forecast_periods)\n\n    df_sea_historical = forecast_df\n    sea_forecast_dates = pd.date_range(start=df_sea_historical['ds'].iloc[-1] + pd.DateOffset(days=7), periods=forecast_periods, freq=set_freq)\n    sea_forecast_data = pd.DataFrame({'ds': sea_forecast_dates,'y': season_forecast.values,'Forecast': 'Forecast'})\n    df_sea_historical['Forecast'] = 'Actual'\n    season_combined_df = pd.concat([df_sea_historical, sea_forecast_data])\nelse:\n    season_combined_df = pd.DataFrame(columns=['ds', 'y', 'Forecast'])\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import altair\nchart_season_combined_df = altair.Chart.from_json(\"\"\"\n{\n    \"width\": \"container\",\n    \"height\": \"container\",\n    \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",\n    \"layer\": [\n        {\n            \"resolve\": {\n                \"scale\": {\n                    \"color\": \"independent\",\n                    \"y\": \"shared\"\n                }\n            },\n            \"layer\": [\n                {\n                    \"transform\": [\n                        {\n                            \"calculate\": \"toDate(datum[\\\"ds\\\"])\",\n                            \"as\": \"ds\"\n                        },\n                        {\n                            \"filter\": \"isValid(datum[\\\"ds\\\"])\"\n                        }\n                    ],\n                    \"layer\": [\n                        {\n                            \"mark\": {\n                                \"type\": \"line\",\n                                \"point\": false,\n                                \"clip\": true,\n                                \"cursor\": \"crosshair\"\n                            },\n                            \"encoding\": {\n                                \"opacity\": {\n                                    \"value\": 1\n                                }\n                            }\n                        },\n                        {\n                            \"mark\": {\n                                \"type\": \"point\",\n                                \"tooltip\": true,\n                                \"clip\": true\n                            },\n                            \"encoding\": {\n                                \"opacity\": {\n                                    \"value\": 0,\n                                    \"condition\": {\n                                        \"param\": \"pivot_hover_22f0e012-3a21-4ba9-a070-c8a204a2d1f3\",\n                                        \"value\": 1,\n                                        \"empty\": false\n                                    }\n                                },\n                                \"size\": {\n                                    \"value\": 80\n                                }\n                            },\n                            \"params\": [\n                                {\n                                    \"name\": \"pivot_hover_22f0e012-3a21-4ba9-a070-c8a204a2d1f3\",\n                                    \"select\": {\n                                        \"type\": \"point\",\n                                        \"on\": \"mouseover\",\n                                        \"nearest\": false,\n                                        \"fields\": [\n                                            \"ds\"\n                                        ]\n                                    }\n                                }\n                            ]\n                        }\n                    ],\n                    \"encoding\": {\n                        \"x\": {\n                            \"field\": \"ds\",\n                            \"type\": \"temporal\",\n                            \"title\": \"Date Range\",\n                            \"scale\": {},\n                            \"axis\": {\n                                \"grid\": true,\n                                \"ticks\": true,\n                                \"labels\": true,\n                                \"labelFlush\": false,\n                                \"format\": {\n                                    \"format\": \"DATE_ISO8601\",\n                                    \"timezone\": \"IGNORE\",\n                                    \"columnType\": \"DATETIME\"\n                                },\n                                \"formatType\": \"DATETIME_FORMATTER\"\n                            }\n                        },\n                        \"y\": {\n                            \"field\": \"y\",\n                            \"type\": \"quantitative\",\n                            \"aggregate\": \"sum\",\n                            \"title\": \"Values\",\n                            \"scale\": {},\n                            \"axis\": {\n                                \"grid\": true,\n                                \"ticks\": true,\n                                \"labels\": true,\n                                \"labelFlush\": false\n                            }\n                        },\n                        \"color\": {\n                            \"field\": \"Forecast\",\n                            \"scale\": {\n                                \"range\": [\n                                    \"#4C78A8\",\n                                    \"#F58518\",\n                                    \"#E45756\",\n                                    \"#72B7B2\",\n                                    \"#54A24B\",\n                                    \"#EECA3B\",\n                                    \"#B279A2\",\n                                    \"#FF9DA6\",\n                                    \"#9D755D\",\n                                    \"#BAB0AC\"\n                                ]\n                            },\n                            \"legend\": {\n                                \"symbolOpacity\": 1,\n                                \"symbolType\": \"stroke\"\n                            },\n                            \"title\": \"Forecast\"\n                        }\n                    }\n                },\n                {\n                    \"data\": {\n                        \"name\": \"season_combined_df\"\n                    },\n                    \"transform\": [\n                        {\n                            \"aggregate\": [],\n                            \"groupby\": [\n                                \"Forecast\"\n                            ]\n                        },\n                        {\n                            \"window\": [\n                                {\n                                    \"op\": \"rank\",\n                                    \"as\": \"rank\"\n                                }\n                            ]\n                        },\n                        {\n                            \"filter\": \"datum.rank <= 101\"\n                        }\n                    ],\n                    \"mark\": {\n                        \"type\": \"rule\",\n                        \"clip\": true\n                    },\n                    \"name\": \"aggregate_color_spec_22f0e012_3a21_4ba9_a070_c8a204a2d1f3\",\n                    \"encoding\": {\n                        \"opacity\": {\n                            \"value\": 0\n                        }\n                    }\n                }\n            ]\n        }\n    ],\n    \"config\": {\n        \"legend\": {\n            \"orient\": \"right\"\n        },\n        \"font\": \"\\\"IBM Plex Sans\\\", system-ui, -apple-system, BlinkMacSystemFont, sans-serif\",\n        \"view\": {}\n    },\n    \"datasets\": {\n        \"layer00\": [\n            {\n                \"name\": \"dummy\",\n                \"value\": 0\n            }\n        ]\n    },\n    \"usermeta\": {\n        \"selectionConfigs\": {}\n    }\n}\n\"\"\")\nchart_season_combined_df.datasets.layer00 = season_combined_df.to_json(orient='records')\nchart_season_combined_df.display(actions=False)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if 'adv_sea' in forecasts_to_run:\n    pro_model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=True, seasonality_mode='multiplicative')\n    pro_model = Prophet(changepoint_prior_scale=0.1)\n    pro_model.fit(forecast_df)\n    future = pro_model.make_future_dataframe(periods=prophet_forecast_days)\n    pro_forecast = pro_model.predict(future)\nelse:\n    pro_forecast = pd.DataFrame(columns=['ds', 'y'])\n\n\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"fig = pro_model.plot(pro_forecast)\n","metadata":{},"execution_count":null,"outputs":[{"data":{"traceback":"\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)\n\u001b[0;32m/tmp/ipykernel_12/2241419801.py\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0m_hex_pks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkernel_execution\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscope_watcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmark_dirty_scope_items\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_hex_types\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMarkDirtyScopeItemsArgs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0m_hex_json\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloads\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{\\\"dirty_scope_items\\\":[\\\"fig\\\",\\\"pro_model\\\",\\\"pro_forecast\\\"]}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mapp_session_token\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_hex_APP_SESSION_TOKEN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpython_kernel_init_status\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_hex_python_kernel_init_status\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhex_timezone\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0m_hex_kernel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvariable_or_none\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"hex_timezone\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscope_getter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mglobals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minterrupt_event\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlocals\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"_hex_interrupt_event\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpro_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpro_forecast\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\n\u001b[0;31mNameError\u001b[0m: name 'pro_model' is not defined"},"execution_count":null,"metadata":{},"output_type":"execute_result"}]},{"cell_type":"code","source":"export_xlsx = _hex_json.loads(\"false\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"export_csv = _hex_json.loads(\"false\")","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"export_timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if export_csv:\n    if pro_forecast is not None and not pro_forecast.empty:\n        pro_forecast.to_csv(f'advanced_forecast_{export_timestamp}.csv', index=False)\n    if season_combined_df is not None and not season_combined_df.empty:\n        season_combined_df.to_csv(f'simple_seasonal_forecast_{export_timestamp}.csv', index=False)\n    if lin_combined_df is not None and not lin_combined_df.empty:\n        lin_combined_df.to_csv(f'linear_forecast_{export_timestamp}.csv', index=False)\nelse:\n    pass\n","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"if export_xlsx:\n    if pro_forecast is not None and not pro_forecast.empty:\n        pro_forecast.to_excel('advanced_forecast.xlsx', index=False, engine='openpyxl')\n    if season_combined_df is not None and not season_combined_df.empty:\n        season_combined_df.to_excel('simple_seasonal_forecast.xlsx', index=False, engine='openpyxl')\n    if lin_combined_df is not None and not lin_combined_df.empty:\n        lin_combined_df.to_excel('linear_forecast.xlsx', index=False, engine='openpyxl')\nelse:\n    pass\n","metadata":{},"execution_count":null,"outputs":[]}],"metadata":{"orig_nbformat":4,"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"hex_info":{"author":null,"project_id":"6356acb1-2d8d-4f12-96a9-376dac1bb85e","version":"draft","exported_date":"Fri Nov 24 2023 03:06:47 GMT+0000 (Coordinated Universal Time)"}},"nbformat":4,"nbformat_minor":4}
